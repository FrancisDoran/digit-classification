import torch
from torch.utils.data import DataLoader
from torch import nn
from torchvision import datasets
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
import numpy as np
from torch.optim.lr_scheduler import StepLR

training_data = datasets.MNIST(
    root="data",
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.MNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor()
)

batch_size = 64
train_dataloader = DataLoader(training_data, batch_size=batch_size, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=batch_size, shuffle=False)

device = (
    "cuda"
    if torch.cuda.is_available()
    else "mps"
    if torch.backends.mps.is_available()
    else "cpu"
)
print(f"Using {device} device")


# A slightly deeper network
class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28 * 28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 256),
            nn.ReLU(),
            nn.Linear(256, 10)
        )

    def forward(self, x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits


model = NeuralNetwork().to(device)
print(model)

loss_fn = nn.CrossEntropyLoss()

# Switch to Adam optimizer
optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)

# You can still use a scheduler if you like, but often Adam doesn't need this as much.
# We'll keep it for demonstration.
scheduler = StepLR(optimizer, step_size=30, gamma=0.1)


def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model.train()
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.to(device), y.to(device)
        pred = model(X)
        loss = loss_fn(pred, y)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()


def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss, correct = 0, 0

    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(dim=1) == y).type(torch.float).sum().item()

    test_loss /= num_batches
    accuracy = correct / size
    return accuracy, test_loss


epochs = 100
accuracy_list = []
for t in range(epochs):
    train(train_dataloader, model, loss_fn, optimizer)
    accuracy, test_loss = test(test_dataloader, model, loss_fn)
    accuracy_list.append(accuracy)
    print(f"Epoch {t + 1}, Accuracy: {accuracy * 100:.2f}%, Loss: {test_loss:.4f}")

    # If you're achieving high accuracy early, you might even stop training
    if accuracy >= 0.98:
        print("Reached 98% accuracy, stopping early.")
        break

    scheduler.step()

torch.save(model.state_dict(), "model.pth")
print("Saved PyTorch Model State to model.pth")

# Optional: Plot accuracy vs epochs
epochs_array = np.arange(1, len(accuracy_list) + 1)
accuracy_array = np.array(accuracy_list)

coeffs = np.polyfit(epochs_array, accuracy_array, 1)
slope, intercept = coeffs
line = slope * epochs_array + intercept

plt.figure(figsize=(8, 6))
plt.scatter(epochs_array, accuracy_array, label='Accuracy', color='blue')
plt.plot(epochs_array, line, label='Linear Regression', color='red')
plt.title("Accuracy vs. Epochs")
plt.xlabel("Epochs")
plt.ylabel("Accuracy Rate")
plt.legend()
plt.grid(True)
plt.show()
