import torch
from torch import nn, optim
from torch.utils.data import Dataset
from torchvision import datasets
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
# based on sample code from https://pytorch.org/tutorials/beginner/basics/data_tutorial.html
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        # Define layers
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(7 * 7 * 64, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        # Define the forward pass
        x = F.relu(F.max_pool2d(self.conv1(x), 2))  # Apply convolution and pooling
        x = F.relu(F.max_pool2d(self.conv2(x), 2))
        x = torch.flatten(x, 1)  # Flatten for the fully connected layers
        x = F.relu(self.fc1(x))
        x = self.fc2(x)  # Output layer
        return x

training_data = datasets.MNIST(
    root="data",
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.MNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor()
)
from torch.utils.data import DataLoader

# Create DataLoader for the training set
train_loader = DataLoader(training_data, batch_size=64, shuffle=True)

# Iterate over the data
for batch_idx, (data, target) in enumerate(train_loader):
    # `data` is a batch of images, `target` is the corresponding labels (0-9)
    print(data.shape, target.shape)  # (64, 1, 28, 28) and (64)
